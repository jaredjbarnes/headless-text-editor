{"version":3,"sources":["../../src/browser/BrowserTextEditor.js"],"names":["BrowserTextEditor","keyDownDelegate","keydownDelegate","onPaste","bind","onCut","onCopy","keydown","event","text","clipboardData","getData","invokeHandler","preventDefault","setData","delegate","keyInformation","createKey","invokeKeyHandler","parts","ctrlKey","push","metaKey","altKey","shiftKey","length","namedKeys","key","modifierKeys","join","isCommand","isNamedKey","originalKey","keyEvent","type","domEvent","notify","name","args","apply","defaultMode","TextEditor"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;IACqBA,iB;;;;;AACjB,+BAAsC;AAAA;;AAAA,mFAAJ,EAAI;AAAA,QAAxBC,eAAwB,QAAxBA,eAAwB;;AAAA;;AAClC;AACA,UAAKC,eAAL,GAAuBD,eAAvB;AACA,UAAKE,OAAL,GAAe,MAAKA,OAAL,CAAaC,IAAb,+BAAf;AACA,UAAKC,KAAL,GAAa,MAAKA,KAAL,CAAWD,IAAX,+BAAb;AACA,UAAKE,MAAL,GAAc,MAAKA,MAAL,CAAYF,IAAZ,+BAAd;AACA,UAAKG,OAAL,GAAe,MAAKA,OAAL,CAAaH,IAAb,+BAAf;AANkC;AAOrC;;;;4BACOI,K,EAAO;AACX,UAAMC,IAAI,GAAGD,KAAK,CAACE,aAAN,CAAoBC,OAApB,CAA4B,MAA5B,CAAb;AACA,WAAKC,aAAL,CAAmB,OAAnB,EAA4B,CAAC,IAAD,EAAOH,IAAP,EAAaD,KAAb,CAA5B;AACAA,MAAAA,KAAK,CAACK,cAAN;AACH;;;2BACML,K,EAAO;AACV,UAAMC,IAAI,GAAG,KAAKG,aAAL,CAAmB,MAAnB,EAA2B,CAAC,IAAD,EAAOJ,KAAP,CAA3B,CAAb;;AACA,UAAI,OAAOC,IAAP,KAAgB,QAApB,EAA8B;AAC1BD,QAAAA,KAAK,CAACE,aAAN,CAAoBI,OAApB,CAA4B,YAA5B,EAA0CL,IAA1C;AACH;;AACDD,MAAAA,KAAK,CAACK,cAAN;AACH;;;0BACKL,K,EAAO;AACT,UAAMC,IAAI,GAAG,KAAKG,aAAL,CAAmB,KAAnB,EAA0B,CAAC,IAAD,EAAOJ,KAAP,CAA1B,CAAb;;AACA,UAAI,OAAOC,IAAP,KAAgB,QAApB,EAA8B;AAC1BD,QAAAA,KAAK,CAACE,aAAN,CAAoBI,OAApB,CAA4B,YAA5B,EAA0CL,IAA1C;AACH;;AACDD,MAAAA,KAAK,CAACK,cAAN;AACH;;;uCACkBE,Q,EAAU;AACzB,WAAKb,eAAL,GAAuBa,QAAvB;AACH;;;4BACOP,K,EAAO;AACX,UAAMQ,cAAc,GAAG,KAAKC,SAAL,CAAeT,KAAf,CAAvB;AACA,WAAKU,gBAAL,CAAsBF,cAAtB,EAAsCR,KAAtC;AACH;;;8BACSA,K,EAAO;AACb,UAAMW,KAAK,GAAG,EAAd;;AACA,UAAIX,KAAK,CAACY,OAAV,EAAmB;AACfD,QAAAA,KAAK,CAACE,IAAN,CAAW,MAAX;AACH;;AACD,UAAIb,KAAK,CAACc,OAAV,EAAmB;AACfH,QAAAA,KAAK,CAACE,IAAN,CAAW,MAAX;AACH;;AACD,UAAIb,KAAK,CAACe,MAAV,EAAkB;AACdJ,QAAAA,KAAK,CAACE,IAAN,CAAW,KAAX;AACH;;AACD,UAAIb,KAAK,CAACgB,QAAN,KAAmBL,KAAK,CAACM,MAAN,GAAe,CAAf,IAAoBC,mBAAUlB,KAAK,CAACmB,GAAhB,CAAvC,CAAJ,EAAkE;AAC9DR,QAAAA,KAAK,CAACE,IAAN,CAAW,OAAX;AACH;;AACD,UAAI,CAACO,sBAAapB,KAAK,CAACmB,GAAnB,CAAL,EAA8B;AAC1BR,QAAAA,KAAK,CAACE,IAAN,CAAWb,KAAK,CAACmB,GAAjB;AACH;;AACD,UAAMA,GAAG,GAAGR,KAAK,CAACU,IAAN,CAAW,GAAX,CAAZ;AACA,aAAO;AACHC,QAAAA,SAAS,EAAEX,KAAK,CAACM,MAAN,GAAe,CADvB;AAEHM,QAAAA,UAAU,EAAEL,mBAAUlB,KAAK,CAACmB,GAAhB,CAFT;AAGHK,QAAAA,WAAW,EAAExB,KAAK,CAACmB,GAHhB;AAIHA,QAAAA,GAAG,EAAHA;AAJG,OAAP;AAMH;;;qCACgBX,c,EAAgBR,K,EAAO;AACpC,UAAMyB,QAAQ,GAAG;AACbC,QAAAA,IAAI,EAAElB,cAAc,CAACW,GADR;AAEbd,QAAAA,cAAc,EAAE,KAFH;AAGbG,QAAAA,cAAc,EAAdA,cAHa;AAIbmB,QAAAA,QAAQ,EAAE3B;AAJG,OAAjB;AAMA,WAAK4B,MAAL,CAAYH,QAAZ;;AACA,UAAIA,QAAQ,CAACpB,cAAb,EAA6B;AACzBL,QAAAA,KAAK,CAACK,cAAN;AACA;AACH;;AACD,UAAI,CAACG,cAAc,CAACc,SAAhB,IAA6B,CAACd,cAAc,CAACe,UAAjD,EAA6D;AACzD,aAAKnB,aAAL,CAAmB,SAAnB,EAA8B,CAAC,IAAD,EAAOI,cAAc,CAACgB,WAAtB,EAAmCxB,KAAnC,CAA9B;AACH,OAFD,MAGK;AACD,YAAMmB,GAAG,GAAGX,cAAc,CAACW,GAA3B;AACA,aAAKf,aAAL,CAAmBe,GAAnB,EAAwB,CAAC,IAAD,EAAOnB,KAAP,CAAxB;AACH;AACJ;;;kCACa6B,I,EAAMC,I,EAAM;AACtB,UAAI,KAAKpC,eAAL,IAAwB,IAAxB,IACA,OAAO,KAAKA,eAAL,CAAqBmC,IAArB,CAAP,KAAsC,UAD1C,EACsD;AAClD,eAAO,KAAKnC,eAAL,CAAqBmC,IAArB,EAA2BE,KAA3B,CAAiC,IAAjC,EAAuCD,IAAvC,CAAP;AACH,OAHD,MAIK,IAAI,OAAOE,qBAAYH,IAAZ,CAAP,KAA6B,UAAjC,EAA6C;AAC9C,eAAOG,qBAAYH,IAAZ,EAAkBE,KAAlB,CAAwB,IAAxB,EAA8BD,IAA9B,CAAP;AACH;AACJ;;;;EAxF0CG,oB","sourcesContent":["import TextEditor from '../TextEditor';\nimport namedKeys from './namedKeys';\nimport defaultMode from './defaultMode';\nimport modifierKeys from './modifierKeys';\nexport default class BrowserTextEditor extends TextEditor {\n    constructor({ keyDownDelegate } = {}) {\n        super();\n        this.keydownDelegate = keyDownDelegate;\n        this.onPaste = this.onPaste.bind(this);\n        this.onCut = this.onCut.bind(this);\n        this.onCopy = this.onCopy.bind(this);\n        this.keydown = this.keydown.bind(this);\n    }\n    onPaste(event) {\n        const text = event.clipboardData.getData('text');\n        this.invokeHandler('paste', [this, text, event]);\n        event.preventDefault();\n    }\n    onCopy(event) {\n        const text = this.invokeHandler('copy', [this, event]);\n        if (typeof text === 'string') {\n            event.clipboardData.setData('text/plain', text);\n        }\n        event.preventDefault();\n    }\n    onCut(event) {\n        const text = this.invokeHandler('cut', [this, event]);\n        if (typeof text === 'string') {\n            event.clipboardData.setData('text/plain', text);\n        }\n        event.preventDefault();\n    }\n    setKeydownDelegate(delegate) {\n        this.keydownDelegate = delegate;\n    }\n    keydown(event) {\n        const keyInformation = this.createKey(event);\n        this.invokeKeyHandler(keyInformation, event);\n    }\n    createKey(event) {\n        const parts = [];\n        if (event.ctrlKey) {\n            parts.push('Ctrl');\n        }\n        if (event.metaKey) {\n            parts.push('Meta');\n        }\n        if (event.altKey) {\n            parts.push('Alt');\n        }\n        if (event.shiftKey && (parts.length > 0 || namedKeys[event.key])) {\n            parts.push('Shift');\n        }\n        if (!modifierKeys[event.key]) {\n            parts.push(event.key);\n        }\n        const key = parts.join('+');\n        return {\n            isCommand: parts.length > 1,\n            isNamedKey: namedKeys[event.key],\n            originalKey: event.key,\n            key,\n        };\n    }\n    invokeKeyHandler(keyInformation, event) {\n        const keyEvent = {\n            type: keyInformation.key,\n            preventDefault: false,\n            keyInformation,\n            domEvent: event,\n        };\n        this.notify(keyEvent);\n        if (keyEvent.preventDefault) {\n            event.preventDefault();\n            return;\n        }\n        if (!keyInformation.isCommand && !keyInformation.isNamedKey) {\n            this.invokeHandler('keydown', [this, keyInformation.originalKey, event]);\n        }\n        else {\n            const key = keyInformation.key;\n            this.invokeHandler(key, [this, event]);\n        }\n    }\n    invokeHandler(name, args) {\n        if (this.keydownDelegate != null &&\n            typeof this.keydownDelegate[name] === 'function') {\n            return this.keydownDelegate[name].apply(null, args);\n        }\n        else if (typeof defaultMode[name] === 'function') {\n            return defaultMode[name].apply(null, args);\n        }\n    }\n}\n"],"file":"BrowserTextEditor.js"}