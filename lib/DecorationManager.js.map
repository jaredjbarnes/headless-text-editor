{"version":3,"sources":["../src/DecorationManager.js"],"names":["DecorationManager","editor","range","startIndex","endIndex","decorationPositions","WeakMap","decoration","leftAmount","rightAmount","leftValue","rightValue","amount","value","left","Math","min","right","max","positions","get","includes","filter","p","length","cursor","position","set","push","shift","decorations","d","type","forEach","isDecorationLeftOfTheRange","isDecorationRightOfTheRange","adjustBothSides","isDecorationWithinTheRange","assignBothSides","doesDecorationSurroundTheRange","adjustRightSide","doesRangeOverlapLeftSideOfDecoration","overlap","originalSize","doesRangeOverlapRightSideOfDecoration","assignRightSide","text","onIndex","isSticky","isRangeOnLeftSideOfDecoration","isRangeOnRightSideOfDecoration","saveDecorationPosition"],"mappings":"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","sourcesContent":["export default class DecorationManager {\n    constructor(editor) {\n        this.editor = editor;\n        this.range = {\n            startIndex: 0,\n            endIndex: 0,\n        };\n        this.decorationPositions = new WeakMap();\n    }\n    adjustBothSides(decoration, leftAmount, rightAmount) {\n        if (decoration.startIndex < decoration.endIndex) {\n            decoration.startIndex += leftAmount;\n            decoration.endIndex += rightAmount;\n        }\n        else {\n            decoration.startIndex += rightAmount;\n            decoration.endIndex += leftAmount;\n        }\n    }\n    assignBothSides(decoration, leftValue, rightValue) {\n        if (decoration.startIndex < decoration.endIndex) {\n            decoration.startIndex = leftValue;\n            decoration.endIndex = rightValue;\n        }\n        else {\n            decoration.startIndex = rightValue;\n            decoration.endIndex = leftValue;\n        }\n    }\n    adjustLeftSide(decoration, amount) {\n        if (decoration.startIndex < decoration.endIndex) {\n            decoration.startIndex += amount;\n        }\n        else {\n            decoration.endIndex += amount;\n        }\n    }\n    adjustRightSide(decoration, amount) {\n        if (decoration.startIndex < decoration.endIndex) {\n            decoration.endIndex += amount;\n        }\n        else {\n            decoration.startIndex += amount;\n        }\n    }\n    assignRightSide(decoration, value) {\n        if (decoration.startIndex < decoration.endIndex) {\n            decoration.endIndex = value;\n        }\n        else {\n            decoration.startIndex = value;\n        }\n    }\n    assignLeftSide(decoration, value) {\n        if (decoration.startIndex < decoration.endIndex) {\n            decoration.startIndex = value;\n        }\n        else {\n            decoration.endIndex = value;\n        }\n    }\n    isRangeOnLeftSideOfDecoration(decoration) {\n        const left = Math.min(decoration.startIndex, decoration.endIndex);\n        return (this.range.startIndex === this.range.endIndex && this.range.startIndex === left);\n    }\n    isRangeOnRightSideOfDecoration(decoration) {\n        const right = Math.max(decoration.startIndex, decoration.endIndex);\n        return (this.range.startIndex === this.range.endIndex && this.range.startIndex === right);\n    }\n    isDecorationLeftOfTheRange(decoration) {\n        const right = Math.max(decoration.startIndex, decoration.endIndex);\n        return right <= this.range.startIndex;\n    }\n    isDecorationRightOfTheRange(decoration) {\n        const left = Math.min(decoration.startIndex, decoration.endIndex);\n        return left >= this.range.endIndex;\n    }\n    isDecorationWithinTheRange(decoration) {\n        const left = Math.min(decoration.startIndex, decoration.endIndex);\n        const right = Math.max(decoration.startIndex, decoration.endIndex);\n        return this.range.startIndex <= left && this.range.endIndex >= right;\n    }\n    doesDecorationSurroundTheRange(decoration) {\n        const left = Math.min(decoration.startIndex, decoration.endIndex);\n        const right = Math.max(decoration.startIndex, decoration.endIndex);\n        return this.range.startIndex >= left && this.range.endIndex <= right;\n    }\n    doesRangeOverlapLeftSideOfDecoration(decoration) {\n        const left = Math.min(decoration.startIndex, decoration.endIndex);\n        return this.range.startIndex < left && this.range.endIndex > left;\n    }\n    doesRangeOverlapRightSideOfDecoration(decoration) {\n        const right = Math.max(decoration.startIndex, decoration.endIndex);\n        return this.range.startIndex < right && this.range.endIndex > right;\n    }\n    isSticky(decoration) {\n        const positions = this.decorationPositions.get(decoration);\n        const left = Math.min(decoration.startIndex, decoration.endIndex);\n        const right = Math.max(decoration.startIndex, decoration.endIndex);\n        if (positions &&\n            !positions.includes('right') &&\n            !positions.includes('left') &&\n            positions.filter(p => p === 'on-left-boundary').length < 2) {\n            return true;\n        }\n        if (this.editor.cursor.startIndex > left && this.editor.cursor.startIndex < right) {\n            return true;\n        }\n        return false;\n    }\n    saveDecorationPosition(decoration, position) {\n        let positions = this.decorationPositions.get(decoration);\n        if (positions == null) {\n            positions = [];\n            this.decorationPositions.set(decoration, positions);\n        }\n        positions.push(position);\n        if (positions.length > 2) {\n            positions.shift();\n        }\n    }\n    collapse(startIndex, endIndex) {\n        this.range.startIndex = Math.min(startIndex, endIndex);\n        this.range.endIndex = Math.max(startIndex, endIndex);\n        const amount = this.range.startIndex - this.range.endIndex;\n        const decorations = this.editor.decorations.filter(d => d.type !== 'cursor');\n        decorations.forEach(decoration => {\n            if (this.isDecorationLeftOfTheRange(decoration)) {\n                // Do Nothing.\n                //console.log(\"left of range\");\n            }\n            else if (this.isDecorationRightOfTheRange(decoration)) {\n                //console.log(\"right of range\");\n                this.adjustBothSides(decoration, amount, amount);\n            }\n            else if (this.isDecorationWithinTheRange(decoration)) {\n                //console.log(\"is within\");\n                this.assignBothSides(decoration, startIndex, startIndex);\n            }\n            else if (this.doesDecorationSurroundTheRange(decoration)) {\n                this.adjustRightSide(decoration, amount);\n            }\n            else if (this.doesRangeOverlapLeftSideOfDecoration(decoration)) {\n                //console.log(\"is left overlap\");\n                const overlap = endIndex - decoration.startIndex;\n                const originalSize = decoration.endIndex - decoration.startIndex;\n                this.assignBothSides(decoration, startIndex, startIndex + originalSize - overlap);\n            }\n            else if (this.doesRangeOverlapRightSideOfDecoration(decoration)) {\n                this.assignRightSide(decoration, startIndex);\n            }\n            else {\n                //console.log(\"Shouldn't get here.\", decoration);\n            }\n            decoration.startIndex = Math.max(0, decoration.startIndex);\n            decoration.startIndex = Math.min(this.editor.text.length, decoration.startIndex);\n            decoration.endIndex = Math.max(0, decoration.endIndex);\n            decoration.endIndex = Math.min(this.editor.text.length, decoration.endIndex);\n        });\n    }\n    expand(onIndex, amount) {\n        this.range.startIndex = onIndex;\n        this.range.endIndex = onIndex;\n        const decorations = this.editor.decorations.filter(d => d.type !== 'cursor');\n        decorations.forEach(decoration => {\n            if (this.isSticky(decoration)) {\n                if (this.isRangeOnLeftSideOfDecoration(decoration)) {\n                    //console.log(\"sticky on left boundary\");\n                    this.adjustRightSide(decoration, amount);\n                }\n                else if (this.isRangeOnRightSideOfDecoration(decoration)) {\n                    //console.log(\"sticky on right boundary\");\n                    this.adjustRightSide(decoration, amount);\n                }\n                else if (this.isDecorationWithinTheRange(decoration)) {\n                    //console.log(\"sticky within\");\n                    this.adjustRightSide(decoration, amount);\n                }\n                else if (this.doesDecorationSurroundTheRange(decoration)) {\n                    //console.log(\"sticky surrounds range\");\n                    this.adjustRightSide(decoration, amount);\n                }\n                else if (this.isDecorationRightOfTheRange(decoration)) {\n                    //console.log(\"sticky is right of range\");\n                    this.adjustBothSides(decoration, amount, amount);\n                }\n                else if (this.isDecorationLeftOfTheRange(decoration)) {\n                    //console.log(\"non-sticky is left of range\");\n                    // Do nothing\n                }\n                else {\n                    //console.log('sticky', this.range, decoration);\n                }\n            }\n            else {\n                if (this.isRangeOnLeftSideOfDecoration(decoration)) {\n                    //console.log(\"non-sticky on left boundary\");\n                    this.adjustBothSides(decoration, amount, amount);\n                }\n                else if (this.isRangeOnRightSideOfDecoration(decoration)) {\n                    //console.log(\"non-sticky on right boundary\");\n                    // Do nothing\n                }\n                else if (this.isDecorationWithinTheRange(decoration)) {\n                    //console.log(\"non-sticky within\");\n                    this.adjustRightSide(decoration, amount);\n                }\n                else if (this.doesDecorationSurroundTheRange(decoration)) {\n                    //console.log(\"non-sticky surrounds range\");\n                    this.adjustRightSide(decoration, amount);\n                }\n                else if (this.isDecorationRightOfTheRange(decoration)) {\n                    //console.log(\"non-sticky is right of range\");\n                    this.adjustBothSides(decoration, amount, amount);\n                }\n                else if (this.isDecorationLeftOfTheRange(decoration)) {\n                    //console.log(\"non-sticky is left of range\");\n                    // Do nothing\n                }\n                else {\n                    //console.log('non-sticky', this.range, decoration);\n                }\n            }\n        });\n    }\n    saveDecorationPlacementHistory() {\n        this.range.startIndex = this.editor.cursor.startIndex;\n        this.range.endIndex = this.editor.cursor.startIndex;\n        const decorations = this.editor.decorations.filter(d => d.type !== 'cursor');\n        decorations.forEach(decoration => {\n            if (this.isRangeOnLeftSideOfDecoration(decoration)) {\n                this.saveDecorationPosition(decoration, 'on-left-boundary');\n            }\n            else if (this.isRangeOnRightSideOfDecoration(decoration)) {\n                this.saveDecorationPosition(decoration, 'on-right-boundary');\n            }\n            else if (this.doesDecorationSurroundTheRange(decoration)) {\n                this.saveDecorationPosition(decoration, 'surrounds');\n            }\n            else if (this.isDecorationRightOfTheRange(decoration)) {\n                this.saveDecorationPosition(decoration, 'right');\n            }\n            else if (this.isDecorationLeftOfTheRange(decoration)) {\n                this.saveDecorationPosition(decoration, 'left');\n            }\n            else {\n                //console.log('saveDecorationPlacementHistory', this.range, decoration);\n            }\n        });\n    }\n}\n"],"file":"DecorationManager.js"}